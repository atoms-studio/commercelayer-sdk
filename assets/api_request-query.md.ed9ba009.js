import{o as s,c as n,a}from"./app.016600e8.js";const e='{"title":"RequestQuery","description":"","frontmatter":{},"headers":[{"level":2,"title":"include?","slug":"include"},{"level":2,"title":"fields?","slug":"fields"},{"level":2,"title":"sort?","slug":"sort"},{"level":2,"title":"page?","slug":"page"},{"level":2,"title":"filter?","slug":"filter"},{"level":2,"title":"relatedTo?","slug":"relatedto"}],"relativePath":"api/request-query.md","lastUpdated":1630922546661}',t={},p=a('<h1 id="requestquery"><a class="header-anchor" href="#requestquery" aria-hidden="true">#</a> RequestQuery</h1><p>This is the object used to filter/alter the results of a request.<br> Its signature is:</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">RequestQuery</span> <span class="token punctuation">{</span>\n  include<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  fields<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  sort<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n  page<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    size<span class="token operator">:</span> <span class="token builtin">number</span>\n    <span class="token builtin">number</span><span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token punctuation">}</span>\n  filter<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span>\n  relatedTo<span class="token operator">?</span><span class="token operator">:</span> ResourceInstance\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="include"><a class="header-anchor" href="#include" aria-hidden="true">#</a> include?</h2><p>This property is used to include related resources in the response. It accepts an array of related resources. You can also use nested resources by using dot notation.</p><div class="language-ts"><pre><code><span class="token punctuation">{</span>\n  include<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;attachments&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;prices&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;prices.price_lists&#39;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Read more about including associations on the <a href="https://docs.commercelayer.io/api/including-associations" target="_blank" rel="noopener noreferrer">official Commerce Layer documentation</a>.</p><h2 id="fields"><a class="header-anchor" href="#fields" aria-hidden="true">#</a> fields?</h2><p>This property is used to select only specific fields from the response. It accepts a object in which keys are the resource names, and values are an array of field names to include.</p><div class="language-ts"><pre><code><span class="token punctuation">{</span>\n  fields<span class="token operator">:</span> <span class="token punctuation">{</span>\n    skus<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;code&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;prices&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    prices<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;formatted_amount&#39;</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Read more about sparse fieldsets on the <a href="https://docs.commercelayer.io/api/sparse-fieldsets" target="_blank" rel="noopener noreferrer">official Commerce Layer documentation</a>.</p><h2 id="sort"><a class="header-anchor" href="#sort" aria-hidden="true">#</a> sort?</h2><p>This property is used to sort the results. It accepts an array of strings, where each string is a field used to sort by. The default sorting direction is ascending. To sort in descending order, prefix the field name with a minus sign.</p><div class="language-ts"><pre><code><span class="token punctuation">{</span>\n  sort<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;-created_at&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;code&#39;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Read more about sorting results on the <a href="https://docs.commercelayer.io/api/sorting-results" target="_blank" rel="noopener noreferrer">official Commerce Layer documentation</a>.</p><h2 id="page"><a class="header-anchor" href="#page" aria-hidden="true">#</a> page?</h2><p>This property is used to apply pagination to a request. It accepts an object with two properties: size and number. The size property is the number of results per page, and the number property is the page number to return.<br> The default page size if not specified is 10.</p><blockquote><p>Please note that the maximum page size the Commerce Layer API supports is 25. Passing a larger value will result in an error.</p></blockquote><div class="language-ts"><pre><code><span class="token punctuation">{</span>\n  page<span class="token operator">:</span> <span class="token punctuation">{</span>\n    size<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n    <span class="token builtin">number</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Read more about pagination on the <a href="https://docs.commercelayer.io/api/pagination" target="_blank" rel="noopener noreferrer">official Commerce Layer documentation</a>.</p><h2 id="filter"><a class="header-anchor" href="#filter" aria-hidden="true">#</a> filter?</h2><p>This property is used to filter the results of a request. It accepts an object in which keys are the fields to filter by, and values are the values of the filters.<br> Note that field names must be suffixed by a matcher that specifies the operation used to compare the value.</p><div class="language-ts"><pre><code><span class="token punctuation">{</span>\n  filter<span class="token operator">:</span> <span class="token punctuation">{</span>\n    code_matches<span class="token operator">:</span> <span class="token string">&#39;sku-123%&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>For the complete list of matchers, read more about filtering data on the <a href="https://docs.commercelayer.io/api/filtering-data" target="_blank" rel="noopener noreferrer">official Commerce Layer documentation</a>.</p><h2 id="relatedto"><a class="header-anchor" href="#relatedto" aria-hidden="true">#</a> relatedTo?</h2><p>This property is used to apply a request only to resources related to another, like retrieving all orders related to a customer.</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> init<span class="token punctuation">,</span> Auth<span class="token punctuation">,</span> Orders <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@atoms-studio/commercelayer-sdk&#39;</span>\n\n<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  host<span class="token operator">:</span> <span class="token string">&#39;https://&lt;domain&gt;.commercelayer.io/&#39;</span><span class="token punctuation">,</span>\n  clientId<span class="token operator">:</span> <span class="token string">&#39;9A-ewDDlpDHdeNeJiYDOFFt3g259GMdcVGQg-Jh_SDk&#39;</span><span class="token punctuation">,</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">await</span> Auth<span class="token punctuation">.</span><span class="token function">setMarket</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> customer <span class="token operator">=</span> Auth<span class="token punctuation">.</span><span class="token function">getProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Orders<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  relatedTo<span class="token operator">:</span> customer<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div>',27);t.render=function(a,e,t,o,r,c){return s(),n("div",null,[p])};export default t;export{e as __pageData};
