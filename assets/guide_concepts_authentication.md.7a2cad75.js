import{o as n,c as s,a}from"./app.016600e8.js";const t='{"title":"Authentication","description":"","frontmatter":{},"headers":[{"level":2,"title":"Guest","slug":"guest"},{"level":2,"title":"Customer","slug":"customer"},{"level":2,"title":"Integration","slug":"integration"},{"level":2,"title":"Keeping customers logged in","slug":"keeping-customers-logged-in"},{"level":2,"title":"Refreshing access tokens","slug":"refreshing-access-tokens"}],"relativePath":"guide/concepts/authentication.md","lastUpdated":1627380624283}',e={},o=a('<h1 id="authentication"><a class="header-anchor" href="#authentication" aria-hidden="true">#</a> Authentication</h1><p>Authentication can be performed in 3 ways:</p><ul><li><a href="#guest">As a guest using a sales channel</a></li><li><a href="#customer">As a customer using a sales channel</a></li><li><a href="#integration">As an integration</a></li></ul><h2 id="guest"><a class="header-anchor" href="#guest" aria-hidden="true">#</a> Guest</h2><p>To authenticate as a guest, simply set the market number using <code>Auth.setMarket</code>:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> init<span class="token punctuation">,</span> Auth <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@atoms-studio/commercelayer-sdk&#39;</span>\n\n<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  host<span class="token operator">:</span> <span class="token string">&#39;https://&lt;domain&gt;.commercelayer.io/&#39;</span><span class="token punctuation">,</span>\n  clientId<span class="token operator">:</span> <span class="token string">&#39;9A-ewDDlpDHdeNeJiYDOFFt3g259GMdcVGQg-Jh_SDk&#39;</span><span class="token punctuation">,</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">await</span> Auth<span class="token punctuation">.</span><span class="token function">setMarket</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span>\n</code></pre></div><p>Setting the market always fetches a guest access token and caches it until it expires.<br> Fetching resources will always use the cached token.</p><h2 id="customer"><a class="header-anchor" href="#customer" aria-hidden="true">#</a> Customer</h2><p>To authenticate as a customer, set the market number and call <code>Auth.loginAsCustomer</code> passing username and password:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> init<span class="token punctuation">,</span> Auth <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@atoms-studio/commercelayer-sdk&#39;</span>\n\n<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  host<span class="token operator">:</span> <span class="token string">&#39;https://&lt;domain&gt;.commercelayer.io/&#39;</span><span class="token punctuation">,</span>\n  clientId<span class="token operator">:</span> <span class="token string">&#39;9A-ewDDlpDHdeNeJiYDOFFt3g259GMdcVGQg-Jh_SDk&#39;</span><span class="token punctuation">,</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">await</span> Auth<span class="token punctuation">.</span><span class="token function">setMarket</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> customer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> Auth<span class="token punctuation">.</span><span class="token function">loginAsCustomer</span><span class="token punctuation">(</span><span class="token string">&#39;john@exaple.com&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;p4ssw0rd&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>Logging in as a customer fetches an access token and the profile of the customer.<br> After logging in, fetching resources will use the customer access token.<br><br></p><p>To manually log a customer out, as with a logout button, call <code>Auth.logoutCustomer</code>:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Auth <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@atoms-studio/commercelayer-sdk&#39;</span>\n\nAuth<span class="token punctuation">.</span><span class="token function">logoutCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p>After logging out, fetching resources will use a guest access token. <br></p><p><strong>Note</strong>: When changing markets while a customer is logged in, the customer will be automatically logged out due to how the Commercelayer API works.<br><br></p><h2 id="integration"><a class="header-anchor" href="#integration" aria-hidden="true">#</a> Integration</h2><p>To authenticate as an integration, pass a clientSecret to the <code>init</code> function and call <code>Auth.loginAsIntegration</code>:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> init<span class="token punctuation">,</span> Auth <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@atoms-studio/commercelayer-sdk&#39;</span>\n\n<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  host<span class="token operator">:</span> <span class="token string">&#39;https://&lt;domain&gt;.commercelayer.io/&#39;</span><span class="token punctuation">,</span>\n  clientId<span class="token operator">:</span> <span class="token string">&#39;9A-ewDDlpDHdeNeJiYDOFFt3g259GMdcVGQg-Jh_SDk&#39;</span><span class="token punctuation">,</span> \n  clientSecret<span class="token operator">:</span> <span class="token string">&#39;9A-ewDDlpDHdeNeJiYDOFFt3g259GMdcVGQg-Jh_SDk&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">await</span> Auth<span class="token punctuation">.</span><span class="token function">loginAsIntegration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p>Note that you are not required to set a market with integrations, as they are often used to perform global operations.</p><p><strong>WARNING</strong>: NEVER use integrations in a browser context. Exposing integration credentials to the browser gives everyone read and write permissions to any resource!</p><h2 id="keeping-customers-logged-in"><a class="header-anchor" href="#keeping-customers-logged-in" aria-hidden="true">#</a> Keeping customers logged in</h2><p>To keep a customer logged in between sessions, first of all you should save the customer access token, refresh token, and the token scope to cookies:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> init<span class="token punctuation">,</span> Auth <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@atoms-studio/commercelayer-sdk&#39;</span>\n<span class="token keyword">import</span> Cookie <span class="token keyword">from</span> <span class="token string">&#39;cookie-universal&#39;</span>\n<span class="token keyword">const</span> cookies <span class="token operator">=</span> <span class="token function">Cookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  host<span class="token operator">:</span> <span class="token string">&#39;https://&lt;domain&gt;.commercelayer.io/&#39;</span><span class="token punctuation">,</span>\n  clientId<span class="token operator">:</span> <span class="token string">&#39;9A-ewDDlpDHdeNeJiYDOFFt3g259GMdcVGQg-Jh_SDk&#39;</span><span class="token punctuation">,</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">await</span> Auth<span class="token punctuation">.</span><span class="token function">setMarket</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> token<span class="token punctuation">,</span> refreshToken <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> Auth<span class="token punctuation">.</span><span class="token function">loginAsCustomer</span><span class="token punctuation">(</span><span class="token string">&#39;john@exaple.com&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;p4ssw0rd&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> scope <span class="token operator">=</span> Auth<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Save token, refresh token and scope to cookies</span>\ncookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;cl_access_token&#39;</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span>\ncookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;cl_refresh_token&#39;</span><span class="token punctuation">,</span> refreshToken<span class="token punctuation">)</span>\ncookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;cl_scope&#39;</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span>\n</code></pre></div><p>Now when you app starts, get the cookie values and pass them to the <code>Auth.useCustomerSession</code> method:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> init<span class="token punctuation">,</span> Auth <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@atoms-studio/commercelayer-sdk&#39;</span>\n<span class="token keyword">import</span> Cookie <span class="token keyword">from</span> <span class="token string">&#39;cookie-universal&#39;</span>\n<span class="token keyword">const</span> cookies <span class="token operator">=</span> <span class="token function">Cookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  host<span class="token operator">:</span> <span class="token string">&#39;https://&lt;domain&gt;.commercelayer.io/&#39;</span><span class="token punctuation">,</span>\n  clientId<span class="token operator">:</span> <span class="token string">&#39;9A-ewDDlpDHdeNeJiYDOFFt3g259GMdcVGQg-Jh_SDk&#39;</span><span class="token punctuation">,</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">await</span> Auth<span class="token punctuation">.</span><span class="token function">setMarket</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Obtain saved data</span>\n<span class="token keyword">const</span> savedToken <span class="token operator">=</span> cookies<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;cl_access_token&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> savedRefreshToken <span class="token operator">=</span> cookies<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;cl_refresh_token&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> savedScope <span class="token operator">=</span> cookies<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;cl_scope&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Try to restore the session</span>\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token keyword">await</span> Auth<span class="token punctuation">.</span><span class="token function">useCustomerSession</span><span class="token punctuation">(</span>savedToken<span class="token punctuation">,</span> savedRefreshToken<span class="token punctuation">,</span> savedScope<span class="token punctuation">)</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Session cannot be restored</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><h2 id="refreshing-access-tokens"><a class="header-anchor" href="#refreshing-access-tokens" aria-hidden="true">#</a> Refreshing access tokens</h2><p>Access token refresh is performed automatically while fetching resources when receiving a 401 Unauthorized response from the API.<br></p><p>You can alter this behavior by passing additional options to <code>init</code>:</p><div class="language-ts"><pre><code>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> init<span class="token punctuation">,</span> Auth <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@atoms-studio/commercelayer-sdk&#39;</span>\n\n<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  host<span class="token operator">:</span> <span class="token string">&#39;https://&lt;domain&gt;.commercelayer.io/&#39;</span><span class="token punctuation">,</span>\n  clientId<span class="token operator">:</span> <span class="token string">&#39;9A-ewDDlpDHdeNeJiYDOFFt3g259GMdcVGQg-Jh_SDk&#39;</span><span class="token punctuation">,</span> \n  refreshTokens<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Pass false to disable automatic token refresh</span>\n  refreshTokensAttempts<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// The number of attempts to try to refresh the token</span>\n  <span class="token comment">// A callback that will be called when a token cannot be refreshed</span>\n  <span class="token function-variable function">onRefreshError</span><span class="token operator">:</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Redirect to the login page if a customer is logged in</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>Auth<span class="token punctuation">.</span><span class="token function">isCustomerLoggedIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      Auth<span class="token punctuation">.</span><span class="token function">logoutCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div>',29);e.render=function(a,t,e,p,c,i){return n(),s("div",null,[o])};export default e;export{t as __pageData};
